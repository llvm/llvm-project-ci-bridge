#===----------------------------------------------------------------------===##
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===----------------------------------------------------------------------===##

#
# This file describes the various pre-commit CI bots used to test libc++.
#
# This file should never contain logic -- all the logic must be offloaded
# into scripts. This is critical to being able to reproduce CI issues outside
# of the CI environment, which is important for debugging.
#
# It is also worth noting that this script is split into several sections, the
# goal being to reduce the load on testers when a commit is known to fail.
#

# The Linux CI runners use the nightly ToT build provided by the Docker image.
# (Note the image isn't updated daily.) The LLVM_HEAD_VERSION contains that
# version number. The Linux CI runners for GCC use the latest stable version.
# Theses numbers are available in all runners, making it easier to update the
# version number.
env:
    # LLVM POST-BRANCH bump version
    # LLVM POST-BRANCH add compiler test for ToT - 1, e.g. "Clang 17"
    # LLVM RELEASE bump remove compiler ToT - 3, e.g. "Clang 15"
    LLVM_STABLE_VERSION: "16"
    LLVM_HEAD_VERSION: "17"
    GCC_STABLE_VERSION: "12"
steps:
  #
  # Light pre-commit tests for things like formatting or when people forget
  # to update generated files.
  #
  - label: "Format"
    command: "libcxx/utils/ci/run-buildbot check-format"
    artifact_paths:
      - "**/clang-format.patch"
    env:
        GIT_CLANG_FORMAT: "/usr/bin/git-clang-format-${LLVM_STABLE_VERSION} --binary clang-format-${LLVM_STABLE_VERSION}"
        CC: "clang-${LLVM_HEAD_VERSION}"
        CXX: "clang++-${LLVM_HEAD_VERSION}"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  - label: "Generated output"
    command: "libcxx/utils/ci/run-buildbot check-generated-output"
    artifact_paths:
      - "**/generated_output.patch"
      - "**/generated_output.status"
    env:
        CC: "clang-${LLVM_HEAD_VERSION}"
        CXX: "clang++-${LLVM_HEAD_VERSION}"
        CLANG_FORMAT: "/usr/bin/clang-format-${LLVM_STABLE_VERSION}"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  - label: "Documentation"
    command: "libcxx/utils/ci/run-buildbot documentation"
    artifact_paths:
      - "**/test-results.xml"
    env:
        CC: "clang-${LLVM_HEAD_VERSION}"
        CXX: "clang++-${LLVM_HEAD_VERSION}"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  - label: "C++26"
    command: "libcxx/utils/ci/run-buildbot generic-cxx26"
    artifact_paths:
      - "**/test-results.xml"
      - "**/*.abilist"
    env:
        CC: "clang-${LLVM_HEAD_VERSION}"
        CXX: "clang++-${LLVM_HEAD_VERSION}"
        ENABLE_CLANG_TIDY: "On"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  - label: "Modular build"
    command: "libcxx/utils/ci/run-buildbot generic-modules"
    artifact_paths:
      - "**/test-results.xml"
      - "**/*.abilist"
    env:
        CC: "clang-${LLVM_HEAD_VERSION}"
        CXX: "clang++-${LLVM_HEAD_VERSION}"
        ENABLE_CLANG_TIDY: "On"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  - label: "C++23 Module std"
    command: "libcxx/utils/ci/run-buildbot generic-module-std-cxx23"
    artifact_paths:
      - "**/test-results.xml"
      - "**/*.abilist"
    env:
        # Note modules require and absolute path for clang-scan-deps
        # https://github.com/llvm/llvm-project/issues/61006
        CC: "/usr/lib/llvm-${LLVM_HEAD_VERSION}/bin/clang"
        CXX: "/usr/lib/llvm-${LLVM_HEAD_VERSION}/bin/clang++"
        CMAKE: "/opt/bin/cmake"
        ENABLE_CLANG_TIDY: "On"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  # Test back-deployment to older Apple platforms
  - label: "Apple back-deployment macosx10.9"
    command: "libcxx/utils/ci/run-buildbot apple-system-backdeployment-10.9"
    artifact_paths:
      - "**/test-results.xml"
      - "**/*.abilist"
    agents:
      queue: "libcxx-builders"
      os: "macos"
      arch: "x86_64" # We need to use x86_64 for back-deployment CI on this target since macOS didn't support arm64 back then.
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  - label: "Clang-cl (DLL)"
    command: "bash libcxx/utils/ci/run-buildbot clang-cl-dll"
    artifact_paths:
      - "**/test-results.xml"
      - "**/*.abilist"
    agents:
      queue: "windows"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120
