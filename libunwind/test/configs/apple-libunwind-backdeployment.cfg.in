# Testing configuration for back-deployment against older Apple system libunwind.
#
# Under this configuration, we compile and link all the test suite against the latest libunwind,
# however we run against the libunwind on a different platform. This emulates the workflow of
# a developer building their application using recent tools but with the goal of deploying
# on existing devices running an older OS (and hence an older dylib).

import os, site
site.addsitedir(os.path.join('@LIBUNWIND_LIBCXX_PATH@', 'utils'))
import libcxx.test.params, libcxx.test.config, libcxx.test.dsl

lit_config.load_config(config, '@CMAKE_CURRENT_BINARY_DIR@/cmake-bridge.cfg')

BACKDEPLOYMENT_PARAMETERS = [
    libcxx.test.dsl.Parameter(name='dyld_library_path', type=str,
        actions=lambda path: [libcxx.test.dsl.AddSubstitution('%{dyld-library-path}', path)],
        help="""
        The simulated root of the system when running tests.

        This should be a directory hierarchy under which the libc++, libc++abi and libunwind dylibs
        can be found. The dylibs in that hierarchy are the one that will be used at runtime when
        running the tests.
        """),
]

config.substitutions.append(('%{flags}',
    '-isysroot {}'.format('@CMAKE_OSX_SYSROOT@') if '@CMAKE_OSX_SYSROOT@' else ''
))
config.substitutions.append(('%{compile_flags}',
    '-nostdinc++ -I %{include}'
))
config.substitutions.append(('%{link_flags}',
    '-nostdlib++ -L %{lib} -lc++ -lc++abi -lunwind'
))
config.substitutions.append(('%{exec}',
    '%{executor} --execdir %T --env DYLD_LIBRARY_PATH="%{dyld-library-path}" -- '
))

config.stdlib = 'apple-libc++'

import os, site
import libcxx.test.params, libcxx.test.config
libcxx.test.config.configure(
    libcxx.test.params.DEFAULT_PARAMETERS + BACKDEPLOYMENT_PARAMETERS,
    libcxx.test.features.DEFAULT_FEATURES,
    config,
    lit_config
)
